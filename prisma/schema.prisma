generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id      Int      @id @default(autoincrement())
  userId  String  @unique 
  email   String?   @unique 
  name    String?
  role   String  @default("user")
  orders Order[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          String      @id @default(uuid())
  title       String
  navPos      Int?          @unique
  images      Image[]    
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  title        String
  description String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  images      Image[]   @relation("ProductToImage")
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}

model Order {
  id        String    @id @default(uuid())
  orderNr   Int       @default(autoincrement())
  userId    String?
  user       User?     @relation(fields:[userId], references: [userId])
  orderItems OrderItem[] // Relation to OrderItem model
  totalPrice Decimal
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  // Foreign Key to Product
  quantity Int
  product   Product @relation(fields: [productId], references: [id])

}

model Image {
  id        String  @id @default(uuid())
  url       String @unique
  public_id String  @unique
  isPrimary Boolean @default(false)
  product  Product? @relation("ProductToImage", fields: [productId], references: [id])
  productId String?
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}